// <auto-generated />
using System;
using AplikacjaWedkarska.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AplikacjaWedkarska.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231203093948_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AplikacjaWedkarska.Api.Entities.AccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CardID");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11aab16c-7c2c-13a4-557d-7d1aa32d4a23"),
                            CardID = "000001",
                            DateCreated = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2908),
                            DateOfBirth = new DateTime(2000, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "agraba@cos.nie",
                            IsDeleted = false,
                            Name = "Artur",
                            Password = "jGl25bVBBBW96Qi9Te4V37Fnqchz/Eu4qB9vKrRIqRg=",
                            RoleID = 2,
                            Surname = "Graba"
                        },
                        new
                        {
                            Id = new Guid("22bbb16c-7c2c-13a4-557d-7d1aa32d4a23"),
                            CardID = "000002",
                            DateCreated = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2985),
                            DateOfBirth = new DateTime(2000, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jdyrdul@cos.nie",
                            IsDeleted = false,
                            Name = "Jan",
                            Password = "jGl25bVBBBW96Qi9Te4V37Fnqchz/Eu4qB9vKrRIqRg=",
                            RoleID = 1,
                            Surname = "Dyrduł"
                        });
                });

            modelBuilder.Entity("AplikacjaWedkarska.Api.Entities.CardEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRegistered")
                        .HasColumnType("bit");

                    b.Property<bool>("Lowland1Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Mountain1Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Mountain2Active")
                        .HasColumnType("bit");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerSurname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = "000001",
                            DateCreated = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2811),
                            DateModified = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2842),
                            Email = "agraba@cos.nie",
                            IsRegistered = true,
                            Lowland1Active = false,
                            Mountain1Active = false,
                            Mountain2Active = false,
                            OwnerName = "Artur",
                            OwnerSurname = "Graba"
                        },
                        new
                        {
                            Id = "000002",
                            DateCreated = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2845),
                            DateModified = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2846),
                            Email = "jdyrdul@cos.nie",
                            IsRegistered = true,
                            Lowland1Active = false,
                            Mountain1Active = false,
                            Mountain2Active = false,
                            OwnerName = "Jan",
                            OwnerSurname = "Dyrduł"
                        },
                        new
                        {
                            Id = "000003",
                            DateCreated = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2849),
                            DateModified = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2850),
                            Email = "kzapala@cos.nie",
                            IsRegistered = false,
                            Lowland1Active = false,
                            Mountain1Active = false,
                            Mountain2Active = false,
                            OwnerName = "Klaudia",
                            OwnerSurname = "Zapała"
                        },
                        new
                        {
                            Id = "000004",
                            DateCreated = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2852),
                            DateModified = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2854),
                            Email = "ropak@cos.nie",
                            IsRegistered = false,
                            Lowland1Active = false,
                            Mountain1Active = false,
                            Mountain2Active = false,
                            OwnerName = "Remigiusz",
                            OwnerSurname = "Opak"
                        },
                        new
                        {
                            Id = "000005",
                            DateCreated = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2856),
                            DateModified = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2857),
                            Email = "bsarat@cos.nie",
                            IsRegistered = false,
                            Lowland1Active = false,
                            Mountain1Active = false,
                            Mountain2Active = false,
                            OwnerName = "Benedykt",
                            OwnerSurname = "Sarat"
                        },
                        new
                        {
                            Id = "000006",
                            DateCreated = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2858),
                            DateModified = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2860),
                            Email = "okataran@cos.nie",
                            IsRegistered = false,
                            Lowland1Active = false,
                            Mountain1Active = false,
                            Mountain2Active = false,
                            OwnerName = "Oliwier",
                            OwnerSurname = "Kataran"
                        },
                        new
                        {
                            Id = "000007",
                            DateCreated = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2861),
                            DateModified = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2862),
                            Email = "maniol@cos.nie",
                            IsRegistered = false,
                            Lowland1Active = false,
                            Mountain1Active = false,
                            Mountain2Active = false,
                            OwnerName = "Michał",
                            OwnerSurname = "Anioł"
                        },
                        new
                        {
                            Id = "000008",
                            DateCreated = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2864),
                            DateModified = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2865),
                            Email = "mlars@cos.nie",
                            IsRegistered = false,
                            Lowland1Active = false,
                            Mountain1Active = false,
                            Mountain2Active = false,
                            OwnerName = "Michał",
                            OwnerSurname = "Lars"
                        },
                        new
                        {
                            Id = "000009",
                            DateCreated = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2867),
                            DateModified = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2868),
                            Email = "mjagiello@cos.nie",
                            IsRegistered = false,
                            Lowland1Active = false,
                            Mountain1Active = false,
                            Mountain2Active = false,
                            OwnerName = "Mariola",
                            OwnerSurname = "Jagiełło"
                        },
                        new
                        {
                            Id = "000010",
                            DateCreated = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2870),
                            DateModified = new DateTime(2023, 12, 3, 10, 39, 48, 170, DateTimeKind.Local).AddTicks(2871),
                            Email = "kcygan@cos.nie",
                            IsRegistered = false,
                            Lowland1Active = false,
                            Mountain1Active = false,
                            Mountain2Active = false,
                            OwnerName = "Konrad",
                            OwnerSurname = "Cygan"
                        });
                });

            modelBuilder.Entity("AplikacjaWedkarska.Api.Entities.CaughtFishEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CatchDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReservationEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Size")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FishId");

                    b.HasIndex("ReservationEntityId");

                    b.ToTable("CaughtFishes");
                });

            modelBuilder.Entity("AplikacjaWedkarska.Api.Entities.FishEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DailyLimit")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumSize")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumSize")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProtectionPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProtectionPeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Species")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UnableToTake")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Fishes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("40320d9d-3b31-4834-85dd-4c47fb5bb55f"),
                            DailyLimit = 2,
                            Species = "Amur biały",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("57a87d78-0054-4246-be05-ad6a2b198b52"),
                            DailyLimit = 1,
                            MaximumSize = 70,
                            MinimumSize = 40,
                            Species = "Boleń",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("bc385976-3d43-447d-bb26-0ae73cf5d1c4"),
                            DailyLimit = 1,
                            MaximumSize = 60,
                            MinimumSize = 40,
                            Species = "Brzana",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("ec4b479f-aa58-4fc7-9820-25910234777c"),
                            DailyLimit = 0,
                            Species = "Certa",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("c83cba6e-67f8-49a0-b625-3b4cb485fb27"),
                            DailyLimit = 3,
                            MaximumSize = 45,
                            MinimumSize = 30,
                            Species = "Jaź",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("d2d9be29-93e9-44a2-8bec-8c336630c7d7"),
                            MinimumSize = 10,
                            Species = "Jazgarz",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("a6eca0bb-1b43-40a5-a9c7-5a661ab23f12"),
                            MinimumSize = 15,
                            Species = "Jelec",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("ad334f21-ca3f-6f12-bf32-12ac34ac5612"),
                            DailyLimit = 2,
                            MaximumSize = 70,
                            MinimumSize = 40,
                            Species = "Karp",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("625abc9e-a533-4876-a1ad-c75082739e54"),
                            Species = "Karaś chiński",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("8f2be803-ae34-4707-b255-965b172395d7"),
                            DailyLimit = 0,
                            Species = "Karaś pospolity (złocisty)",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("7a3a32fa-c4c8-4368-b33d-7db55620c2e1"),
                            Species = "Karaś srebrzysty (japoniec)",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("0864d0d1-9b0c-45b4-955b-fec1b548f1d2"),
                            DailyLimit = 0,
                            Species = "Kiełb",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("fdfb1a36-b8f1-42a2-bbc3-000a93ba95a5"),
                            DailyLimit = 3,
                            MaximumSize = 45,
                            MinimumSize = 30,
                            Species = "Kleń",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("dfb10add-4748-4669-96ed-31ba835c2caa"),
                            Species = "Krąp",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("d1bc95f2-69a1-41a4-8a2c-05af538d7bc8"),
                            MaximumSize = 60,
                            Species = "Leszcz",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("2a9272c5-086c-47ad-b03b-567b4044d76b"),
                            MaximumSize = 50,
                            MinimumSize = 30,
                            Species = "Lin",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("9a998d2f-acbc-4fb9-871f-d60a9e64bda9"),
                            DailyLimit = 0,
                            Species = "Lipień",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("cf40ea67-aa94-49fe-8e1b-745be64a4f5d"),
                            DailyLimit = 0,
                            Species = "Łosoś atlantycki",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("0af80732-4687-43f0-863f-e29811bf4ef0"),
                            MinimumSize = 25,
                            Species = "Miętus",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("0391ba54-fd53-43d5-9091-dc040d82ec1a"),
                            MaximumSize = 35,
                            MinimumSize = 20,
                            Species = "Okoń",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("171265cc-b732-4e5c-8e3f-0cde27b827f9"),
                            MinimumSize = 15,
                            Species = "Płoć",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("885a8fa4-6d28-4c4a-b900-9c33c3394ffb"),
                            DailyLimit = 2,
                            MaximumSize = 50,
                            MinimumSize = 35,
                            Species = "Pstrąg potokowy",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("63ea69c8-50d5-44f2-b0de-b3fe27a9f3ca"),
                            DailyLimit = 2,
                            MinimumSize = 30,
                            Species = "Pstrąg tęczowy",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("b92cef02-7d83-4af8-b9e3-08eb860c6a2e"),
                            DailyLimit = 2,
                            MinimumSize = 25,
                            Species = "Rozpiór",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("580a550d-222d-4e3c-b452-5fcbe1c0f25e"),
                            DailyLimit = 1,
                            MaximumSize = 80,
                            MinimumSize = 55,
                            Species = "Sandacz",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("b1dcb9fd-bbfa-413d-a60b-b5a967592f13"),
                            DailyLimit = 2,
                            MinimumSize = 25,
                            Species = "Sapa",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("64fc7d5d-38ae-47e1-bb11-a635bb82ffe4"),
                            MinimumSize = 35,
                            Species = "Sieja",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("1564f4a6-4f92-4af6-b0f3-2677d91957b2"),
                            MinimumSize = 18,
                            Species = "Sielawa",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("da442ddb-1a45-49cc-b429-a6406a2b1af0"),
                            Species = "Słonecznica",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("ecfb0262-4164-4d58-8de1-0838c43ffa32"),
                            DailyLimit = 1,
                            MinimumSize = 70,
                            Species = "Sum",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("eda798c4-f5ec-4ff7-8aaf-6c17cf30e750"),
                            DailyLimit = 1,
                            MaximumSize = 90,
                            MinimumSize = 55,
                            Species = "Szczupak",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("fc621c8f-5847-4a7a-b746-7f033de7174a"),
                            DailyLimit = 5,
                            MinimumSize = 25,
                            Species = "Świnka",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("1834d8fa-225b-4d96-82eb-65322022ceb5"),
                            Species = "Tołpyga",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("e49221b4-fcbf-4648-8264-85cc3df0205b"),
                            DailyLimit = 0,
                            Species = "Troć wędrowna",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("819ebcc7-e872-48b2-83e9-d2c72c7006f7"),
                            Species = "Ukleja",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("681cc7ea-01df-4e5d-b1af-996a2f77a2fe"),
                            DailyLimit = 2,
                            MinimumSize = 60,
                            Species = "Węgorz",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("ce7350d3-ddad-49f1-a36f-4f915ccd28b3"),
                            MinimumSize = 15,
                            Species = "Wzdręga",
                            UnableToTake = false
                        },
                        new
                        {
                            Id = new Guid("ca372d7a-6795-4778-b407-140dfb110f43"),
                            DailyLimit = 0,
                            Species = "Jesiotr",
                            UnableToTake = false
                        });
                });

            modelBuilder.Entity("AplikacjaWedkarska.Api.Entities.FishingSpotEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CatchAndRelease")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FishingSpots");

                    b.HasData(
                        new
                        {
                            Id = new Guid("23e8b16c-7c2c-13a4-557d-7d1aa32d4a23"),
                            Address = "Jaśle - Stawik, 26-140 Łączna ",
                            CatchAndRelease = false,
                            Description = "Jest to niewielki zbiornik na rzeczce w miejscowości Jaśle. Żyją w nim ładne ryby. Cisza nad wodą dopełnia wędkarskiego szczęście. Głębokość akwenu wynosi od około 1 m przy wpływie rzeczki do ponad 4 m przy wypływie. W połowie zbiornika znajduje się betonowy pomost, który można wykorzystać do celów wędkarskich. W jego pobliżu zawsze kręcą się drapieżniki. Zbiornik ma dopiero kilka lat, mimo to można spotkać tu różne gatunki ryb. Japońce, karpie, liny, płocie, jazie gwarantują zajęcie dla wędkarzy z lekką gruntówką bądź spławikówką. Zestaw ze spławikiem można usytuować zaraz za trzcinami. Ryby przebywają tam chętnie z powodu dużej ilości pokarmu. Większość białorybu bardzo dobrze bierze na kukurydzę. Aby zwiększyć swoje szanse, niektórzy wędkarze nęcą łowisko kilka dni przed planowaną wyprawą. Z drapieżników możemy się spodziewać szczupaków i okoni. Szczupaki lubią duże obrotówki bądź wahadłówki. Białym twisterem też można dobrze połowić. Na okonie nie wybieram się bez motor oil. Większe osobniki bywają kapryśne. Jednego dnia biorą dobrze, a następnego nie reagują na nic. ",
                            Latitude = 51.001476608965859,
                            Longitude = 20.775563090091644,
                            Title = "Zbiornik Jaśle",
                            Type = "Nizinna"
                        },
                        new
                        {
                            Id = new Guid("29aa3ffd-02fe-4f47-93bb-b4d9f041654f"),
                            Address = "Dawidowicza 3, 26-130 Suchedniów",
                            CatchAndRelease = true,
                            Description = "Zalew o powierzchni lustra wody bliskiej 22 ha położony na rzece Kamionce. Zbiornik znajduje się w centrum miasta sąsiadując z parkiem miejskim. Charakterystyczną cechą tego zbiornika jest wyspa położona na środku zbiornika stanowiąca rezerwat ptactwa wodnego i chronionych gatunków zwierząt. Głębokość zbiornika jest niewielka, a dno jest w większości muliste. Przy zalewie działa Ośrodek Sportu i Rekreacji (OSiR), gdzie jest do dyspozycji baza noclegowa, kąpielisko z kilkunastometrową plażą, kort tenisowy, boisko do gry w siatkę plażową oraz wiele innych atrakcji. Zalew jest łowny z każdego miejsca, a wędkarze nie narzekają na efekty. Zbiornik słynie z dużych okazów karpi, amurów, sandaczy. Jest również dużo leszcza, lecz w większości skąpych rozmiarów, ale trafiają się i okazy w granicach 60 cm. Złowimy tu również obie odmiany karasia, płocie, wzdręgi, jazie, liny, okonie i sandacze. ",
                            Latitude = 51.048285319876271,
                            Longitude = 20.843287684659408,
                            Title = "Zalew w Suchedniowie",
                            Type = "Nizinna"
                        });
                });

            modelBuilder.Entity("AplikacjaWedkarska.Api.Entities.FishingSpotLimitEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DailyLimit")
                        .HasColumnType("int");

                    b.Property<Guid>("FishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FishingSpotId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FishId");

                    b.HasIndex("FishingSpotId");

                    b.ToTable("FishingSpotLimits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5975fe07-8041-4454-b3e6-29e70196ad41"),
                            DailyLimit = 1,
                            FishId = new Guid("ad334f21-ca3f-6f12-bf32-12ac34ac5612"),
                            FishingSpotId = new Guid("23e8b16c-7c2c-13a4-557d-7d1aa32d4a23")
                        });
                });

            modelBuilder.Entity("AplikacjaWedkarska.Api.Entities.InspectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Base64Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ControlledUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ControllerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfInspection")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FishingSpotId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ControlledUserId");

                    b.HasIndex("ControllerId");

                    b.HasIndex("FishingSpotId");

                    b.ToTable("Inspections");
                });

            modelBuilder.Entity("AplikacjaWedkarska.Api.Entities.ReservationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FishingSpotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReservationStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("FishingSpotId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55e8b16c-7c2c-13a4-557d-7d1aa32d4a23"),
                            AccountId = new Guid("11aab16c-7c2c-13a4-557d-7d1aa32d4a23"),
                            DateCreated = new DateTime(2023, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FishingSpotId = new Guid("23e8b16c-7c2c-13a4-557d-7d1aa32d4a23"),
                            IsActive = false,
                            ReservationStart = new DateTime(2023, 11, 5, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("99e8b16c-7c2c-13a4-557d-7d1aa32d4a23"),
                            AccountId = new Guid("11aab16c-7c2c-13a4-557d-7d1aa32d4a23"),
                            DateCreated = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FishingSpotId = new Guid("23e8b16c-7c2c-13a4-557d-7d1aa32d4a23"),
                            IsActive = true,
                            ReservationStart = new DateTime(2023, 12, 3, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("66aa3ffd-02fe-4f47-93bb-b4d9f041654f"),
                            AccountId = new Guid("22bbb16c-7c2c-13a4-557d-7d1aa32d4a23"),
                            DateCreated = new DateTime(2023, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FishingSpotId = new Guid("29aa3ffd-02fe-4f47-93bb-b4d9f041654f"),
                            IsActive = false,
                            ReservationStart = new DateTime(2023, 11, 7, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AplikacjaWedkarska.Api.Entities.RoleEntity", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            Name = "user"
                        },
                        new
                        {
                            RoleID = 2,
                            Name = "controller"
                        });
                });

            modelBuilder.Entity("AplikacjaWedkarska.Api.Entities.AccountEntity", b =>
                {
                    b.HasOne("AplikacjaWedkarska.Api.Entities.CardEntity", "Card")
                        .WithMany()
                        .HasForeignKey("CardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("AplikacjaWedkarska.Api.Entities.CaughtFishEntity", b =>
                {
                    b.HasOne("AplikacjaWedkarska.Api.Entities.FishEntity", "Fish")
                        .WithMany()
                        .HasForeignKey("FishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AplikacjaWedkarska.Api.Entities.ReservationEntity", null)
                        .WithMany("CaughtFishes")
                        .HasForeignKey("ReservationEntityId");

                    b.Navigation("Fish");
                });

            modelBuilder.Entity("AplikacjaWedkarska.Api.Entities.FishingSpotLimitEntity", b =>
                {
                    b.HasOne("AplikacjaWedkarska.Api.Entities.FishEntity", "Fish")
                        .WithMany()
                        .HasForeignKey("FishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AplikacjaWedkarska.Api.Entities.FishingSpotEntity", "FishingSpot")
                        .WithMany("FishingSpotLimits")
                        .HasForeignKey("FishingSpotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fish");

                    b.Navigation("FishingSpot");
                });

            modelBuilder.Entity("AplikacjaWedkarska.Api.Entities.InspectionEntity", b =>
                {
                    b.HasOne("AplikacjaWedkarska.Api.Entities.AccountEntity", "ControlledUser")
                        .WithMany()
                        .HasForeignKey("ControlledUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AplikacjaWedkarska.Api.Entities.AccountEntity", "Controller")
                        .WithMany()
                        .HasForeignKey("ControllerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AplikacjaWedkarska.Api.Entities.FishingSpotEntity", "FishingSpot")
                        .WithMany()
                        .HasForeignKey("FishingSpotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ControlledUser");

                    b.Navigation("Controller");

                    b.Navigation("FishingSpot");
                });

            modelBuilder.Entity("AplikacjaWedkarska.Api.Entities.ReservationEntity", b =>
                {
                    b.HasOne("AplikacjaWedkarska.Api.Entities.AccountEntity", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AplikacjaWedkarska.Api.Entities.FishingSpotEntity", "FishingSpot")
                        .WithMany()
                        .HasForeignKey("FishingSpotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("FishingSpot");
                });

            modelBuilder.Entity("AplikacjaWedkarska.Api.Entities.FishingSpotEntity", b =>
                {
                    b.Navigation("FishingSpotLimits");
                });

            modelBuilder.Entity("AplikacjaWedkarska.Api.Entities.ReservationEntity", b =>
                {
                    b.Navigation("CaughtFishes");
                });
#pragma warning restore 612, 618
        }
    }
}
